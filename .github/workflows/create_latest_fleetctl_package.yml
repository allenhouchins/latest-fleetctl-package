name: Create latest fleetctl package
on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:        # Allow manual triggers
permissions:
  contents: read           # Default minimal; override per job as needed
jobs:
  check-fleet-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      new_release: ${{ steps.check_release.outputs.new_release }}
      version: ${{ steps.check_release.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check latest Fleet release
        id: check_release
        run: |
          LATEST=$(curl -s https://api.github.com/repos/fleetdm/fleet/releases/latest | jq -r .tag_name)
          
          # Create version file if it doesn't exist
          if [ ! -f "current_fleetctl_version.txt" ]; then
            echo "none" > current_fleetctl_version.txt
          fi
          
          CURRENT=$(cat current_fleetctl_version.txt)
          
          if [ "$LATEST" != "$CURRENT" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "version=${LATEST}" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi
  create-package:
    # Split into two jobs: build unsigned, then sign and release

  build-unsigned:
    needs: check-fleet-release
    if: needs.check-fleet-release.outputs.new_release == 'true'
    runs-on: macos-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build unsigned Fleet package
        run: |
          chmod +x ./.github/scripts/build_fleetctl_package.sh
          ./.github/scripts/build_fleetctl_package.sh
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PACKAGE_AUTOMATION_TOKEN: ${{ github.token }}

      - name: Upload unsigned package artifact
        uses: actions/upload-artifact@v4
        with:
          name: fleetctl-unsigned
          path: |
            ${{ github.workspace }}/unsigned_pkg_path.txt
            $HOME/Library/AutoPkg/Cache/com.github.jc0b.pkg.fleetctl/*.pkg
          if-no-files-found: error

  sign-and-release:
    needs: [check-fleet-release, build-unsigned]
    if: needs.check-fleet-release.outputs.new_release == 'true'
    runs-on: macos-latest
    timeout-minutes: 20
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download unsigned package artifact
        uses: actions/download-artifact@v4
        with:
          name: fleetctl-unsigned
          path: dist

      - name: Import Code Signing Certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Sign and release package
        run: |
          chmod +x ./.github/scripts/sign_and_release.sh
          ./.github/scripts/sign_and_release.sh dist
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PACKAGE_AUTOMATION_TOKEN: ${{ github.token }}
          DEVELOPER_ID_INSTALLER: ${{ secrets.DEVELOPER_ID_INSTALLER }}
          # Only publish releases when running on main
          PUBLISH_RELEASE: ${{ github.ref_name == 'main' && 'true' || 'false' }}

      - name: Upload signed package artifact (for testing)
        uses: actions/upload-artifact@v4
        with:
          name: fleetctl-signed
          path: dist/*.pkg
          if-no-files-found: error

      - name: Update version file
        if: success() && github.ref_name == 'main'
        run: |
          # Ensure we're on the latest version of main
          git fetch origin main
          git reset --hard origin/main

          # Update version file
          echo "${{ needs.check-fleet-release.outputs.version }}" > current_fleetctl_version.txt

          # Configure git
          git config user.name "${{ secrets.USER_NAME }}"
          git config user.email "${{ secrets.USER_EMAIL }}"

          # Commit and push changes
          git add current_fleetctl_version.txt
          git commit -m "Update Fleet version to ${{ needs.check-fleet-release.outputs.version }}"
          git push origin HEAD:main
